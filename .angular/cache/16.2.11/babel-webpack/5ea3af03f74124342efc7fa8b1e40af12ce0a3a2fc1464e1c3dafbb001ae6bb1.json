{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { inject } from \"@angular/core\";\nimport { BehaviorSubject, catchError, throwError } from \"rxjs\";\nimport { User } from \"../Model/User\";\nimport { tap } from 'rxjs/operators';\nimport { Router } from \"@angular/router\";\nimport { LoggingService } from \"./Logging.Service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.user = new BehaviorSubject(null);\n    this.router = inject(Router);\n    this.loggingService = inject(LoggingService);\n  }\n  signup(email, password) {\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk', data).pipe(catchError(this.handleError), tap(res => {\n      this.handleCreateUser(res);\n    }), catchError(err => {\n      //Write the logic to log errors\n      const errorObj = {\n        statusCode: err.status,\n        errorMessage: err.message,\n        datetime: new Date()\n      };\n      this.loggingService.logError(errorObj);\n      return throwError(() => err);\n    }));\n  }\n  login(email, password) {\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk', data).pipe(catchError(this.handleError), tap(res => {\n      this.handleCreateUser(res);\n    }));\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/login']);\n    localStorage.removeItem('user');\n    if (this.tokenExpiretimer) {\n      clearTimeout(this.tokenExpiretimer);\n    }\n    this.tokenExpiretimer = null;\n  }\n  autoLogin() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user) {\n      return;\n    }\n    const loggedUser = new User(user.email, user.id, user._token, user._expiresIn);\n    if (loggedUser.token) {\n      this.user.next(loggedUser);\n      const timerValue = new Date(user._expiresIn).getTime() - new Date().getTime();\n      this.autoLogout(timerValue);\n    }\n  }\n  autoLogout(expireTime) {\n    this.tokenExpiretimer = setTimeout(() => {\n      this.logout();\n    }, expireTime);\n  }\n  handleCreateUser(res) {\n    const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\n    const expiresIn = new Date(expiresInTs);\n    const user = new User(res.email, res.localId, res.idToken, expiresIn);\n    this.user.next(user);\n    this.autoLogout(res.expiresIn * 1000);\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  handleError(err) {\n    let errorMessage = 'An unknown error has occured';\n    console.log(err);\n    if (!err.error || !err.error.error) {\n      return throwError(() => errorMessage);\n    }\n    switch (err.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = \"This email already exists.\";\n        break;\n      case 'OPERATION_NOT_ALLOWED':\n        errorMessage = 'This operation is not allowed.';\n        break;\n      case 'INVALID_LOGIN_CREDENTIALS':\n        errorMessage = 'The email ID or Password is not correct.';\n        break;\n    }\n    return throwError(() => errorMessage);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpClient","inject","BehaviorSubject","catchError","throwError","User","tap","Router","LoggingService","AuthService","constructor","http","user","router","loggingService","signup","email","password","data","returnSecureToken","post","pipe","handleError","res","handleCreateUser","err","errorObj","statusCode","status","errorMessage","message","datetime","Date","logError","login","logout","next","navigate","localStorage","removeItem","tokenExpiretimer","clearTimeout","autoLogin","JSON","parse","getItem","loggedUser","id","_token","_expiresIn","token","timerValue","getTime","autoLogout","expireTime","setTimeout","expiresInTs","expiresIn","localId","idToken","setItem","stringify","console","log","error","_","_2","factory","ɵfac"],"sources":["D:\\angular-16-complete-course-main\\16-angular-module\\final\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable, inject } from \"@angular/core\";\r\nimport { AuthResponse } from \"../Model/AuthResponse\";\r\nimport { BehaviorSubject, Subject, catchError, throwError } from \"rxjs\";\r\nimport { User } from \"../Model/User\";\r\nimport { tap } from 'rxjs/operators';\r\nimport { Router } from \"@angular/router\";\r\nimport { LoggingService } from \"./Logging.Service\";\r\n\r\n@Injectable()\r\nexport class AuthService{\r\n    http: HttpClient = inject(HttpClient);\r\n    user = new BehaviorSubject<User>(null);\r\n    router: Router = inject(Router);\r\n    loggingService : LoggingService = inject(LoggingService);\r\n    private tokenExpiretimer: any;\r\n\r\n    signup(email, password){\r\n        const data = {email: email, password: password, returnSecureToken: true};\r\n        return this.http.post<AuthResponse>\r\n            (\r\n                'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk', \r\n                data\r\n            ).pipe(catchError(this.handleError), tap((res) => {\r\n                this.handleCreateUser(res)\r\n            }), catchError((err) => {\r\n                //Write the logic to log errors\r\n                const errorObj = { statusCode: err.status, errorMessage: err.message, datetime: new Date() }\r\n                this.loggingService.logError(errorObj);\r\n                return throwError(() => err);\r\n            }))\r\n    }\r\n\r\n    login(email, password){\r\n        const data = {email: email, password: password, returnSecureToken: true};\r\n        return this.http.post<AuthResponse>(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk',\r\n            data\r\n        ).pipe(catchError(this.handleError), tap((res) => {\r\n            this.handleCreateUser(res)\r\n        }))\r\n    }\r\n\r\n    logout(){\r\n        this.user.next(null);\r\n        this.router.navigate(['/login']);\r\n        localStorage.removeItem('user');\r\n\r\n        if(this.tokenExpiretimer){\r\n            clearTimeout(this.tokenExpiretimer);\r\n        }\r\n        this.tokenExpiretimer = null;\r\n    }\r\n\r\n    autoLogin(){\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n        if(!user){\r\n            return;\r\n        }\r\n\r\n        const loggedUser = new User(user.email, user.id, user._token, user._expiresIn)\r\n\r\n        if(loggedUser.token){\r\n            this.user.next(loggedUser);\r\n            const timerValue = new Date(user._expiresIn).getTime() - new Date().getTime();\r\n            this.autoLogout(timerValue);\r\n        }\r\n    }\r\n\r\n    autoLogout(expireTime: number){\r\n        this.tokenExpiretimer = setTimeout(() => {\r\n            this.logout();\r\n        }, expireTime);\r\n    }\r\n\r\n    private handleCreateUser(res){\r\n        const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\r\n        const expiresIn = new Date(expiresInTs);\r\n        const user = new User(res.email, res.localId, res.idToken, expiresIn);\r\n        this.user.next(user);\r\n        this.autoLogout(res.expiresIn * 1000);\r\n\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n    }\r\n    private handleError(err){\r\n        let errorMessage = 'An unknown error has occured'\r\n        console.log(err);\r\n        if(!err.error || !err.error.error){\r\n            return throwError(() => errorMessage);\r\n        }\r\n        switch (err.error.error.message){\r\n            case 'EMAIL_EXISTS':\r\n                errorMessage =\"This email already exists.\";\r\n                break;\r\n            case 'OPERATION_NOT_ALLOWED':\r\n                errorMessage = 'This operation is not allowed.';\r\n                break;\r\n            case 'INVALID_LOGIN_CREDENTIALS':\r\n                errorMessage = 'The email ID or Password is not correct.';\r\n                break\r\n        }\r\n        return throwError(() => errorMessage);\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}