{"ast":null,"code":"import { inject } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpEventType } from '@angular/common/http';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { Subject, throwError } from 'rxjs';\nimport { LoggingService } from \"./Logging.Service\";\nimport { AuthService } from \"./auth.service\";\nimport * as i0 from \"@angular/core\";\nexport let TaskService = /*#__PURE__*/(() => {\n  class TaskService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.loggingService = inject(LoggingService);\n      this.errorSubject = new Subject();\n      this.authService = inject(AuthService);\n    }\n    CreateTask(task) {\n      const headers = new HttpHeaders({\n        'my-header': 'hello-world'\n      });\n      this.http.post('https://angularhttpclient-87b69-default-rtdb.firebaseio.com/tasks.json', task, {\n        headers: headers\n      }).pipe(catchError(err => {\n        //Write the logic to log errors\n        const errorObj = {\n          statusCode: err.status,\n          errorMessage: err.message,\n          datetime: new Date()\n        };\n        this.loggingService.logError(errorObj);\n        return throwError(() => err);\n      })).subscribe({\n        error: err => {\n          this.errorSubject.next(err);\n        }\n      });\n    }\n    DeleteTask(id) {\n      this.http.delete('https://angularhttpclient-87b69-default-rtdb.firebaseio.com/tasks/' + id + '.json').pipe(catchError(err => {\n        //Write the logic to log errors\n        const errorObj = {\n          statusCode: err.status,\n          errorMessage: err.message,\n          datetime: new Date()\n        };\n        this.loggingService.logError(errorObj);\n        return throwError(() => err);\n      })).subscribe({\n        error: err => {\n          this.errorSubject.next(err);\n        }\n      });\n    }\n    DeleteAllTasks() {\n      this.http.delete('https://angularhttpclient-87b69-default-rtdb.firebaseio.com/tasks.json', {\n        observe: 'events',\n        responseType: 'json'\n      }).pipe(tap(event => {\n        console.log(event);\n        if (event.type === HttpEventType.Sent) {}\n      }), catchError(err => {\n        //Write the logic to log errors\n        const errorObj = {\n          statusCode: err.status,\n          errorMessage: err.message,\n          datetime: new Date()\n        };\n        this.loggingService.logError(errorObj);\n        return throwError(() => err);\n      })).subscribe({\n        error: err => {\n          this.errorSubject.next(err);\n        }\n      });\n    }\n    GetAlltasks() {\n      return this.http.get('https://angularhttpclient-87b69-default-rtdb.firebaseio.com/tasks.json').pipe(map(response => {\n        //TRANSFORM DATA\n        let tasks = [];\n        console.log(response);\n        for (let key in response) {\n          if (response.hasOwnProperty(key)) {\n            tasks.push({\n              ...response[key],\n              id: key\n            });\n          }\n        }\n        return tasks;\n      }), catchError(err => {\n        //Write the logic to log errors\n        const errorObj = {\n          statusCode: err.status,\n          errorMessage: err.message,\n          datetime: new Date()\n        };\n        this.loggingService.logError(errorObj);\n        return throwError(() => err);\n      }));\n    }\n    UpdateTask(id, data) {\n      this.http.put('https://angularhttpclient-87b69-default-rtdb.firebaseio.com/tasks/' + id + '.json', data).pipe(catchError(err => {\n        //Write the logic to log errors\n        const errorObj = {\n          statusCode: err.status,\n          errorMessage: err.message,\n          datetime: new Date()\n        };\n        this.loggingService.logError(errorObj);\n        return throwError(() => err);\n      })).subscribe({\n        error: err => {\n          this.errorSubject.next(err);\n        }\n      });\n    }\n    getTaskDetails(id) {\n      return this.http.get('https://angularhttpclient-87b69-default-rtdb.firebaseio.com/tasks/' + id + '.json').pipe(map(response => {\n        console.log(response);\n        let task = {};\n        task = {\n          ...response,\n          id: id\n        };\n        return task;\n      }));\n    }\n    static #_ = this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TaskService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}