{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { inject } from \"@angular/core\";\nimport { BehaviorSubject, catchError, throwError } from \"rxjs\";\nimport { User } from \"../Model/User\";\nimport { tap } from 'rxjs/operators';\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.user = new BehaviorSubject(null);\n    this.router = inject(Router);\n  }\n  signup(email, password) {\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk', data).pipe(catchError(this.handleError), tap(res => {\n      this.handleCreateUser(res);\n    }));\n  }\n  login(email, password) {\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk', data).pipe(catchError(this.handleError), tap(res => {\n      this.handleCreateUser(res);\n    }));\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/login']);\n    localStorage.removeItem('user');\n    if (this.tokenExpiretimer) {\n      clearTimeout(this.tokenExpiretimer);\n    }\n    this.tokenExpiretimer = null;\n  }\n  autoLogin() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user) {\n      return;\n    }\n    const loggedUser = new User(user.email, user.id, user._token, user._expiresIn);\n    if (loggedUser.token) {\n      this.user.next(loggedUser);\n      const timerValue = new Date(user._expiresIn).getTime() - new Date().getTime();\n      this.autoLogout(timerValue);\n    }\n  }\n  autoLogout(expireTime) {\n    this.tokenExpiretimer = setTimeout(() => {\n      this.logout();\n    }, expireTime);\n  }\n  handleCreateUser(res) {\n    const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\n    const expiresIn = new Date(expiresInTs);\n    const user = new User(res.email, res.localId, res.idToken, expiresIn);\n    this.user.next(user);\n    this.autoLogout(res.expiresIn * 1000);\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  handleError(err) {\n    let errorMessage = 'An unknown error has occured';\n    console.log(err);\n    if (!err.error || !err.error.error) {\n      return throwError(() => errorMessage);\n    }\n    switch (err.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = \"This email already exists.\";\n        break;\n      case 'OPERATION_NOT_ALLOWED':\n        errorMessage = 'This operation is not allowed.';\n        break;\n      case 'INVALID_LOGIN_CREDENTIALS':\n        errorMessage = 'The email ID or Password is not correct.';\n        break;\n    }\n    return throwError(() => errorMessage);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpClient","inject","BehaviorSubject","catchError","throwError","User","tap","Router","AuthService","constructor","http","user","router","signup","email","password","data","returnSecureToken","post","pipe","handleError","res","handleCreateUser","login","logout","next","navigate","localStorage","removeItem","tokenExpiretimer","clearTimeout","autoLogin","JSON","parse","getItem","loggedUser","id","_token","_expiresIn","token","timerValue","Date","getTime","autoLogout","expireTime","setTimeout","expiresInTs","expiresIn","localId","idToken","setItem","stringify","err","errorMessage","console","log","error","message","_","_2","factory","ɵfac"],"sources":["D:\\angular-16-complete-course-main\\16-angular-module\\final\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable, inject } from \"@angular/core\";\r\nimport { AuthResponse } from \"../Model/AuthResponse\";\r\nimport { BehaviorSubject, Subject, catchError, throwError } from \"rxjs\";\r\nimport { User } from \"../Model/User\";\r\nimport { tap } from 'rxjs/operators';\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Injectable()\r\nexport class AuthService{\r\n    http: HttpClient = inject(HttpClient);\r\n    user = new BehaviorSubject<User>(null);\r\n    router: Router = inject(Router);\r\n    private tokenExpiretimer: any;\r\n\r\n    signup(email, password){\r\n        const data = {email: email, password: password, returnSecureToken: true};\r\n        return this.http.post<AuthResponse>\r\n            (\r\n                'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk', \r\n                data\r\n            ).pipe(catchError(this.handleError), tap((res) => {\r\n                this.handleCreateUser(res)\r\n            }))\r\n    }\r\n\r\n    login(email, password){\r\n        const data = {email: email, password: password, returnSecureToken: true};\r\n        return this.http.post<AuthResponse>(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk',\r\n            data\r\n        ).pipe(catchError(this.handleError), tap((res) => {\r\n            this.handleCreateUser(res)\r\n        }))\r\n    }\r\n\r\n    logout(){\r\n        this.user.next(null);\r\n        this.router.navigate(['/login']);\r\n        localStorage.removeItem('user');\r\n\r\n        if(this.tokenExpiretimer){\r\n            clearTimeout(this.tokenExpiretimer);\r\n        }\r\n        this.tokenExpiretimer = null;\r\n    }\r\n\r\n    autoLogin(){\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n        if(!user){\r\n            return;\r\n        }\r\n\r\n        const loggedUser = new User(user.email, user.id, user._token, user._expiresIn)\r\n\r\n        if(loggedUser.token){\r\n            this.user.next(loggedUser);\r\n            const timerValue = new Date(user._expiresIn).getTime() - new Date().getTime();\r\n            this.autoLogout(timerValue);\r\n        }\r\n    }\r\n\r\n    autoLogout(expireTime: number){\r\n        this.tokenExpiretimer = setTimeout(() => {\r\n            this.logout();\r\n        }, expireTime);\r\n    }\r\n\r\n    private handleCreateUser(res){\r\n        const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\r\n        const expiresIn = new Date(expiresInTs);\r\n        const user = new User(res.email, res.localId, res.idToken, expiresIn);\r\n        this.user.next(user);\r\n        this.autoLogout(res.expiresIn * 1000);\r\n\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n    }\r\n    private handleError(err){\r\n        let errorMessage = 'An unknown error has occured'\r\n        console.log(err);\r\n        if(!err.error || !err.error.error){\r\n            return throwError(() => errorMessage);\r\n        }\r\n        switch (err.error.error.message){\r\n            case 'EMAIL_EXISTS':\r\n                errorMessage =\"This email already exists.\";\r\n                break;\r\n            case 'OPERATION_NOT_ALLOWED':\r\n                errorMessage = 'This operation is not allowed.';\r\n                break;\r\n            case 'INVALID_LOGIN_CREDENTIALS':\r\n                errorMessage = 'The email ID or Password is not correct.';\r\n                break\r\n        }\r\n        return throwError(() => errorMessage);\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}