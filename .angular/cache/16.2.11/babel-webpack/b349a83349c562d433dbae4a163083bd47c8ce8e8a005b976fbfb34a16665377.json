{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { inject } from \"@angular/core\";\nimport { BehaviorSubject, catchError, throwError } from \"rxjs\";\nimport { User } from \"../Model/User\";\nimport { tap } from 'rxjs/operators';\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.user = new BehaviorSubject(null);\n      this.router = inject(Router);\n    }\n    signup(email, password) {\n      const data = {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      };\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk', data).pipe(catchError(this.handleError), tap(res => {\n        this.handleCreateUser(res);\n      }));\n    }\n    login(email, password) {\n      const data = {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      };\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJzMO7QCbcPEfL6YKLHovGOMdxaZvywFk', data).pipe(catchError(this.handleError), tap(res => {\n        this.handleCreateUser(res);\n      }));\n    }\n    logout() {\n      this.user.next(null);\n      this.router.navigate(['/login']);\n      localStorage.removeItem('user');\n      if (this.tokenExpiretimer) {\n        clearTimeout(this.tokenExpiretimer);\n      }\n      this.tokenExpiretimer = null;\n    }\n    autoLogin() {\n      const user = JSON.parse(localStorage.getItem('user'));\n      if (!user) {\n        return;\n      }\n      const loggedUser = new User(user.email, user.id, user._token, user._expiresIn);\n      if (loggedUser.token) {\n        this.user.next(loggedUser);\n        const timerValue = new Date(user._expiresIn).getTime() - new Date().getTime();\n        this.autoLogout(timerValue);\n      }\n    }\n    autoLogout(expireTime) {\n      this.tokenExpiretimer = setTimeout(() => {\n        this.logout();\n      }, expireTime);\n    }\n    handleCreateUser(res) {\n      const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\n      const expiresIn = new Date(expiresInTs);\n      const user = new User(res.email, res.localId, res.idToken, expiresIn);\n      this.user.next(user);\n      this.autoLogout(res.expiresIn * 1000);\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    handleError(err) {\n      let errorMessage = 'An unknown error has occured';\n      console.log(err);\n      if (!err.error || !err.error.error) {\n        return throwError(() => errorMessage);\n      }\n      switch (err.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = \"This email already exists.\";\n          break;\n        case 'OPERATION_NOT_ALLOWED':\n          errorMessage = 'This operation is not allowed.';\n          break;\n        case 'INVALID_LOGIN_CREDENTIALS':\n          errorMessage = 'The email ID or Password is not correct.';\n          break;\n      }\n      return throwError(() => errorMessage);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}