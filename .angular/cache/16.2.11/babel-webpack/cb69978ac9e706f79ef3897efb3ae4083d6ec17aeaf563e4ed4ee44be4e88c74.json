{"ast":null,"code":"import { inject } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { AuthService } from \"../Services/auth.service\";\nimport { map, take } from \"rxjs/operators\";\nexport const canActivate = (router, state) => {\n  const authService = inject(AuthService);\n  const route = inject(Router);\n  return authService.user.pipe(take(1), map(user => {\n    const loggedIn = user ? true : false;\n    if (loggedIn) {\n      return true;\n    } else {\n      return route.createUrlTree(['/login']);\n    }\n  }));\n};","map":{"version":3,"names":["inject","Router","AuthService","map","take","canActivate","router","state","authService","route","user","pipe","loggedIn","createUrlTree"],"sources":["D:\\AngularCRUDApp\\src\\app\\RouteGuards\\authGuard.ts"],"sourcesContent":["import { inject } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\nimport { AuthService } from \"../Services/auth.service\";\r\nimport { map, take } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nexport const canActivate = (\r\n    router: ActivatedRouteSnapshot, \r\n    state: RouterStateSnapshot\r\n): boolean | UrlTree |Promise<boolean | UrlTree> | Observable<boolean | UrlTree> => {\r\n    const authService = inject(AuthService);\r\n    const route = inject(Router);\r\n\r\n    return authService.user.pipe(take(1), map((user) => {\r\n        const loggedIn =  user ? true : false;\r\n\r\n        if(loggedIn){\r\n            return true;\r\n        }else {\r\n            return route.createUrlTree(['/login']);\r\n        }\r\n    }))\r\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAiCC,MAAM,QAAsC,iBAAiB;AAC9F,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;AAG1C,OAAO,MAAMC,WAAW,GAAGA,CACvBC,MAA8B,EAC9BC,KAA0B,KACqD;EAC/E,MAAMC,WAAW,GAAGR,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMO,KAAK,GAAGT,MAAM,CAACC,MAAM,CAAC;EAE5B,OAAOO,WAAW,CAACE,IAAI,CAACC,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC,EAAED,GAAG,CAAEO,IAAI,IAAI;IAC/C,MAAME,QAAQ,GAAIF,IAAI,GAAG,IAAI,GAAG,KAAK;IAErC,IAAGE,QAAQ,EAAC;MACR,OAAO,IAAI;KACd,MAAK;MACF,OAAOH,KAAK,CAACI,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAE9C,CAAC,CAAC,CAAC;AACP,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}